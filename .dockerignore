# This file excludes paths from the Docker build context.
#
# By default, Docker's build context includes all files (and folders) in the
# current directory. Even if a file isn't copied into the container it is still sent to
# the Docker daemon.
#
# There are multiple reasons to exclude files from the build context:
#
# 1. Prevent nested folders from being copied into the container (ex: exclude
#    /assets/node_modules when copying /assets)
# 2. Reduce the size of the build context and improve build time (ex. /build, /deps, /doc)
# 3. Avoid sending files containing sensitive information
#
# More information on using .dockerignore is available here:
# https://docs.docker.com/engine/reference/builder/#dockerignore-file

.dockerignore

.DS_Store

# Ignore git, but keep git HEAD and refs to access current commit hash if needed:
#
# $ cat .git/HEAD | awk '{print ".git/"$2}' | xargs cat
# d0b8727759e1e0e7aa3d41707d12376e373d5ecc
.git
!.git/HEAD
!.git/refs

# Common development/test artifacts
/cover/
/doc/
/test/
/tmp/
.elixir_ls

# Mix artifacts
/_build/
/deps/
*.ez

# Generated on crash by the VM
erl_crash.dump

# Static artifacts - These should be fetched and built inside the Docker image
/assets/node_modules/
/assets/scss/app.css
/priv/static/assets/
/priv/static/cache_manifest.json

.gitattributes
.gitignore

# Node
## Logs
logs
*.log
assets/npm-debug.log*
assets/yarn-debug.log*
assets/yarn-error.log*

## Misc files
.tool_versions
elixir_buildpack.config
phoenix_static_buildpack.config

# In order to avoid running into weird conflicts when working with docker and on the host machine
# https://elixirforum.com/t/trivial-elixir-app-release-build-runs-but-docker-runtime-error-from-erlexec/30859/3

# Ignore .fetch files in case you like to edit your project deps locally.
.fetch

# If the VM crashes, it generates a dump, let's ignore it too.
erl_crash.dump

# Ignoring the env files
.env*

# Ignoring files relevant for scalingo
elixir_buildpack.config
phoenix_static_buildpack.config

docker-compose*.yml